package storage

import (
	"context"
	"fmt"
	"sync"

	"github.com/jackc/pgtype"
	shopspring "github.com/jackc/pgtype/ext/shopspring-numeric"
	"github.com/jackc/pgx/v4"
	"github.com/jackc/pgx/v4/pgxpool"
)

type Postgres struct {
	Pool *pgxpool.Pool
	Lock sync.RWMutex
}

var db *Postgres

const (
	createUsersTableQuery string = `CREATE TABLE IF NOT EXISTS users(
		id int generated by default as identity PRIMARY KEY,
		login varchar(64) unique NOT NULL,
		password varchar(128) NOT NULL,
		balance numeric DEFAULT 0.00
	);`
	createOrdersTableQuery string = `CREATE TABLE IF NOT EXISTS orders(
		id bigint PRIMARY KEY,
		user_id int REFERENCES users(id),
		status text DEFAULT 'NEW',
		accrual numeric DEFAULT 0.00,
		uploaded_at timestamptz DEFAULT CURRENT_TIMESTAMP
	);`
	createWithdrawalsTableQuery string = `CREATE TABLE IF NOT EXISTS withdrawals(
		id int generated by default as identity PRIMARY KEY,
		user_id int REFERENCES users(id),
		order_id bigint UNIQUE,
		amount numeric DEFAULT 0.00,
		processed_at timestamptz DEFAULT CURRENT_TIMESTAMP
	);`
)

func NewPostgres(ctx context.Context, dsn string) error {
	if db != nil {
		return fmt.Errorf("DB connection already exists")
	}

	pool, err := pgxpool.Connect(ctx, dsn)
	if err != nil {
		return err
	}

	pool.Config().AfterConnect = func(ctx context.Context, conn *pgx.Conn) error {
		conn.ConnInfo().RegisterDataType(pgtype.DataType{
			Value: &shopspring.Numeric{},
			Name:  "numeric",
			OID:   pgtype.NumericOID,
		})
		return nil
	}

	postgres := &Postgres{
		Pool: pool,
	}

	if err = postgres.initDB(ctx, pool); err != nil {
		return err
	}

	db = postgres
	return nil
}

func GetDB() *Postgres {
	return db
}

func (p *Postgres) initDB(ctx context.Context, pool *pgxpool.Pool) error {
	if _, err := pool.Exec(ctx, createUsersTableQuery); err != nil {
		return err
	}

	if _, err := pool.Exec(ctx, createOrdersTableQuery); err != nil {
		return err
	}

	if _, err := pool.Exec(ctx, createWithdrawalsTableQuery); err != nil {
		return err
	}

	return nil
}
